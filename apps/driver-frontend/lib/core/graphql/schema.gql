# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Point {
  lat: Float!
  lng: Float!
  heading: Int
}

type AppConfigInfo {
  logo: String
  name: String
  color: AppColorScheme
}

enum AppColorScheme {
  Cobalt
  CoralRed
  EarthyGreen
  SunburstYellow
  HyperPink
  ElectricIndigo
  AutumnOrange
  Noir
}

type License {
  buyerName: String!
  licenseType: LicenseType!
  supportExpireDate: DateTime!
  connectedApps: [AppType!]!
  platformAddons: [PlatformAddOn!]!
}

enum LicenseType {
  Regular
  Extended
  Bronze
  Silver
  Gold
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AppType {
  Taxi
  Shop
  Parking
}

enum PlatformAddOn {
  FleetAddOn
}

type CurrentConfiguration {
  purchaseCode: String
  backendMapsAPIKey: String
  adminPanelAPIKey: String
  firebaseProjectPrivateKey: String
  versionNumber: String
  companyLogo: String
  companyName: String
  taxi: AppConfigInfo
  shop: AppConfigInfo
  parking: AppConfigInfo
  mysqlHost: String
  mysqlPort: Int
  mysqlUser: String
  mysqlPassword: String
  mysqlDatabase: String
  redisHost: String
  redisPort: Int
  redisPassword: String
  redisDb: Int
}

type UpdatePurchaseCodeClient {
  id: ID!
  enabled: Boolean!
  ip: String!
  port: Float!
  token: String!
  purchaseId: ID!
  firstVerifiedAt: DateTime!
  lastVerifiedAt: DateTime!
}

type LicenseInformation {
  license: License
  benefits: [String!]
  drawbacks: [String!]
  availableUpgrades: [AvaialbeUpgrade!]
}

type AvaialbeUpgrade {
  type: String!
  price: Float!
  benefits: [String!]!
}

type TimeRange {
  open: String!
  close: String!
}

type Announcement {
  id: ID!
  title: String!
  description: String!
  startAt: DateTime!
  expireAt: DateTime!
  url: String
  userType: [AnnouncementUserType!]!
}

enum AnnouncementUserType {
  Driver
  Rider
  Operator
}

type CarModel {
  id: ID!
  name: String!
}

type CarColor {
  id: ID!
  name: String!
}

type Media {
  id: ID!
  address: String!
  base64: String
}

type RiderWallet {
  id: ID!
  balance: Float!
  currency: String!
  riderId: ID!
}

type Rider {
  id: ID!
  firstName: String
  lastName: String
  mobileNumber: String!
  presetAvatarNumber: Int
  media: Media
  wallets(
    """Specify to filter the records returned."""
    filter: RiderWalletFilter! = {}

    """Specify to sort results."""
    sorting: [RiderWalletSort!]! = []
  ): [RiderWallet!]!
}

input RiderWalletFilter {
  and: [RiderWalletFilter!]
  or: [RiderWalletFilter!]
  id: IDFilterComparison
  riderId: IDFilterComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input RiderWalletSort {
  field: RiderWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RiderWalletSortFields {
  id
  riderId
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type ServiceOption {
  id: ID!
  name: String!
  description: String
  type: ServiceOptionType!
  additionalFee: Float
  icon: ServiceOptionIcon!
}

enum ServiceOptionType {
  Free
  Paid
  TwoWay
}

enum ServiceOptionIcon {
  Pet
  TwoWay
  Luggage
  PackageDelivery
  Shopping
  Custom1
  Custom2
  Custom3
  Custom4
  Custom5
}

type Service {
  id: ID!
  name: String!
  paymentMethod: ServicePaymentMethod!
  cancellationTotalFee: Float!
  media: Media!
  options(
    """Specify to filter the records returned."""
    filter: ServiceOptionFilter! = {}

    """Specify to sort results."""
    sorting: [ServiceOptionSort!]! = []
  ): [ServiceOption!]!
}

enum ServicePaymentMethod {
  CashCredit
  OnlyCredit
  OnlyCash
}

input ServiceOptionFilter {
  and: [ServiceOptionFilter!]
  or: [ServiceOptionFilter!]
  id: IDFilterComparison
}

input ServiceOptionSort {
  field: ServiceOptionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ServiceOptionSortFields {
  id
}

type OrderMessage {
  id: ID!
  sentAt: DateTime!
  status: MessageStatus!
  content: String!
  sentByDriver: Boolean!
  requestId: ID!
  request: Order!
}

enum MessageStatus {
  Sent
  Delivered
  Seen
}

type PaymentGateway {
  id: ID!
  enabled: Boolean!
  title: String!
  type: PaymentGatewayType!
  publicKey: String
  linkMethod: GatewayLinkMethod!
  media: Media
}

enum PaymentGatewayType {
  Stripe
  BrainTree
  PayPal
  Paytm
  Razorpay
  Paystack
  PayU
  Instamojo
  Flutterwave
  PayGate
  MIPS
  MercadoPago
  AmazonPaymentServices
  MyTMoney
  WayForPay
  MyFatoorah
  SberBank
  BinancePay
  OpenPix
  PayTR
  CustomLink
}

"""Method of connecting to a payout or saved payment method."""
enum GatewayLinkMethod {
  none
  redirect
  manual
}

type SavedPaymentMethod {
  id: ID!
  type: SavedPaymentMethodType!
  lastFour: String
  isEnabled: Boolean!
  isDefault: Boolean!
  providerBrand: ProviderBrand
  title: String!
  expiryDate: DateTime
  holderName: String
  driverId: ID!
}

"""Saved payment method type"""
enum SavedPaymentMethodType {
  CARD
  BANK_ACCOUNT
}

"""Brand of the provider wether bank name or card provider"""
enum ProviderBrand {
  Visa
  Mastercard
  Amex
  Discover
  Diners
  EftPosAu
  JCB
  UnionPay
  Unknown
}

type PhoneNumber {
  countryCode: String!
  number: String!
}

type DeliveryContact {
  name: String!
  phoneNumber: PhoneNumber!
  email: String
  addressLine1: String!
  addressLine2: String
  zone: String
  buildingNumber: String
  apartmentNumber: String
  city: String
  state: String
  instructions: String
  postalCode: String
  companyName: String
}

type Order {
  id: ID!
  status: OrderStatus!
  type: TaxiOrderType!
  createdOn: DateTime!
  distanceBest: Int!
  durationBest: Int!
  startTimestamp: DateTime
  finishTimestamp: DateTime
  etaPickup: DateTime
  waitMinutes: Float!
  waitCost: Float!
  rideOptionsCost: Float!
  taxCost: Float!
  serviceCost: Float!
  destinationArrivedTo: Int
  driverLastSeenMessagesAt: DateTime!
  riderLastSeenMessagesAt: DateTime!
  senderContact: DeliveryContact
  receiverContact: DeliveryContact
  expectedTimestamp: DateTime!
  costBest: Float!
  costAfterCoupon: Float!
  providerShare: Float!
  paidAmount: Float!
  currency: String!
  addresses: [String!]!
  points: [Point!]!
  tipAmount: Float!
  paymentMode: PaymentMode
  paymentGatewayId: ID
  paymentMethodId: ID
  directions: [Point!]
  driverDirections: [Point!]
  optionsAggregate(
    """Filter to find records to aggregate on"""
    filter: ServiceOptionAggregateFilter
  ): [OrderOptionsAggregateResponse!]!
  conversationAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderMessageAggregateFilter
  ): [OrderConversationAggregateResponse!]!
  driver: Driver
  rider: Rider
  service: Service
  paymentGateway: PaymentGateway
  savedPaymentMethod: SavedPaymentMethod
  options(
    """Specify to filter the records returned."""
    filter: ServiceOptionFilter! = {}

    """Specify to sort results."""
    sorting: [ServiceOptionSort!]! = []
  ): [ServiceOption!]!
  conversation(
    """Specify to filter the records returned."""
    filter: OrderMessageFilter! = {}

    """Specify to sort results."""
    sorting: [OrderMessageSort!]! = []
  ): [OrderMessage!]!
}

enum OrderStatus {
  Requested
  NotFound
  NoCloseFound
  Found
  DriverAccepted
  Arrived
  WaitingForPrePay
  DriverCanceled
  RiderCanceled
  Started
  WaitingForPostPay
  WaitingForReview
  Finished
  Booked
  Expired
}

"""
Different types of taxi orders, including ride, rideshare, parcel delivery, food delivery, and shop delivery.
"""
enum TaxiOrderType {
  Ride
  Rideshare
  ParcelDelivery
  FoodDelivery
  ShopDelivery
}

"""The means of payment for an order."""
enum PaymentMode {
  Cash
  SavedPaymentMethod
  PaymentGateway
  Wallet
}

input ServiceOptionAggregateFilter {
  and: [ServiceOptionAggregateFilter!]
  or: [ServiceOptionAggregateFilter!]
  id: IDFilterComparison
}

input OrderMessageAggregateFilter {
  and: [OrderMessageAggregateFilter!]
  or: [OrderMessageAggregateFilter!]
  id: IDFilterComparison
  requestId: IDFilterComparison
}

input OrderMessageFilter {
  and: [OrderMessageFilter!]
  or: [OrderMessageFilter!]
  id: IDFilterComparison
  requestId: IDFilterComparison
}

input OrderMessageSort {
  field: OrderMessageSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderMessageSortFields {
  id
  requestId
}

type DriverWallet {
  id: ID!
  balance: Float!
  currency: String!
  driverId: ID!
}

type DriverTransacion {
  id: ID!
  createdAt: DateTime!
  action: TransactionAction!
  deductType: DriverDeductTransactionType
  rechargeType: DriverRechargeTransactionType
  amount: Float!
  currency: String!
  refrenceNumber: String
  driverId: ID!
}

enum TransactionAction {
  Recharge
  Deduct
}

enum DriverDeductTransactionType {
  Withdraw
  Commission
  Correction
}

enum DriverRechargeTransactionType {
  OrderFee
  BankTransfer
  InAppPayment
  Gift
}

type DriverServicesServiceDTO {
  driverId: ID!
  serviceId: ID!
  driverEnabled: Boolean!
  service: Service!
}

type Driver {
  id: ID!
  firstName: String
  lastName: String
  mobileNumber: String!
  certificateNumber: String
  countryIso: String
  email: String
  carProductionYear: Int
  carPlate: String
  status: DriverStatus!
  gender: Gender
  registrationTimestamp: DateTime!
  lastSeenTimestamp: DateTime
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  bankSwift: String
  address: String
  presetAvatarNumber: Int
  softRejectionNote: String
  carId: ID

  """arbitary field to prevent exception. The correct field is carId"""
  carModelId: ID!
  carColorId: ID
  searchDistance: Int
  rating: Float
  isWalletHidden: Boolean!
  historyOrdersAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [DriverHistoryOrdersAggregateResponse!]!
  car: CarModel
  carColor: CarColor
  media: Media
  documents(
    """Specify to filter the records returned."""
    filter: MediaFilter! = {}

    """Specify to sort results."""
    sorting: [MediaSort!]! = []
  ): [Media!]
  historyOrders(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter! = {}

    """Specify to sort results."""
    sorting: [OrderSort!]! = []
  ): DriverHistoryOrdersConnection!
  savedPaymentMethods(
    """Specify to filter the records returned."""
    filter: SavedPaymentMethodFilter! = {}

    """Specify to sort results."""
    sorting: [SavedPaymentMethodSort!]! = []
  ): [SavedPaymentMethod!]!
  orders(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 1}

    """Specify to filter the records returned."""
    filter: OrderFilter! = {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}

    """Specify to sort results."""
    sorting: [OrderSort!]! = [{field: id, direction: DESC}]
  ): DriverOrdersConnection!
  currentOrders(
    """Specify to filter the records returned."""
    filter: OrderFilter! = {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}

    """Specify to sort results."""
    sorting: [OrderSort!]! = [{field: id, direction: DESC}]
  ): [Order!]!
  enabledServices(
    """Specify to filter the records returned."""
    filter: DriverServicesServiceDTOFilter! = {}

    """Specify to sort results."""
    sorting: [DriverServicesServiceDTOSort!]! = []
  ): [DriverServicesServiceDTO!]!
  transactions(
    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to filter the records returned."""
    filter: DriverTransacionFilter! = {}

    """Specify to sort results."""
    sorting: [DriverTransacionSort!]! = []
  ): DriverTransactionsConnection!
  wallet(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter! = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!]! = []
  ): [DriverWallet!]!
}

enum DriverStatus {
  Online
  Offline
  Blocked
  InService
  WaitingDocuments
  PendingApproval
  SoftReject
  HardReject
}

enum Gender {
  Male
  Female
  Unknown
}

input OrderAggregateFilter {
  and: [OrderAggregateFilter!]
  or: [OrderAggregateFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  distanceBest: IntFieldComparison
  costBest: FloatFieldComparison
  driverId: IDFilterComparison
  paymentGatewayId: IDFilterComparison
  paymentMethodId: IDFilterComparison
}

input OrderStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: OrderStatus
  neq: OrderStatus
  gt: OrderStatus
  gte: OrderStatus
  lt: OrderStatus
  lte: OrderStatus
  like: OrderStatus
  notLike: OrderStatus
  iLike: OrderStatus
  notILike: OrderStatus
  in: [OrderStatus!]
  notIn: [OrderStatus!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input MediaFilter {
  and: [MediaFilter!]
  or: [MediaFilter!]
  id: IDFilterComparison
}

input MediaSort {
  field: MediaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MediaSortFields {
  id
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input OrderFilter {
  and: [OrderFilter!]
  or: [OrderFilter!]
  id: IDFilterComparison
  status: OrderStatusFilterComparison
  createdOn: DateFieldComparison
  distanceBest: IntFieldComparison
  costBest: FloatFieldComparison
  driverId: IDFilterComparison
  paymentGatewayId: IDFilterComparison
  paymentMethodId: IDFilterComparison
}

input OrderSort {
  field: OrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderSortFields {
  id
  status
  createdOn
  distanceBest
  costBest
  driverId
  paymentGatewayId
  paymentMethodId
}

input SavedPaymentMethodFilter {
  and: [SavedPaymentMethodFilter!]
  or: [SavedPaymentMethodFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input SavedPaymentMethodSort {
  field: SavedPaymentMethodSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SavedPaymentMethodSortFields {
  id
  driverId
}

input DriverServicesServiceDTOFilter {
  and: [DriverServicesServiceDTOFilter!]
  or: [DriverServicesServiceDTOFilter!]
  driverId: IDFilterComparison
  serviceId: IDFilterComparison
}

input DriverServicesServiceDTOSort {
  field: DriverServicesServiceDTOSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverServicesServiceDTOSortFields {
  driverId
  serviceId
}

input DriverTransacionFilter {
  and: [DriverTransacionFilter!]
  or: [DriverTransacionFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input DriverTransacionSort {
  field: DriverTransacionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverTransacionSortFields {
  id
  driverId
}

input DriverWalletFilter {
  and: [DriverWalletFilter!]
  or: [DriverWalletFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input DriverWalletSort {
  field: DriverWalletSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DriverWalletSortFields {
  id
  driverId
}

type MediaEdge {
  """The node containing the Media"""
  node: Media!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type DriverEdge {
  """The node containing the Driver"""
  node: Driver!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type DriverTransactionsConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DriverTransacion!]!
}

type DriverOrdersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!
}

type DriverHistoryOrdersConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Order!]!
}

type DriverHistoryOrdersAggregateGroupBy {
  id: ID
  status: OrderStatus
  createdOn: DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

type DriverHistoryOrdersCountAggregate {
  id: Int
  status: Int
  createdOn: Int
  distanceBest: Int
  costBest: Int
  driverId: Int
  paymentGatewayId: Int
  paymentMethodId: Int
}

type DriverHistoryOrdersSumAggregate {
  id: Float
  distanceBest: Float
  costBest: Float
  driverId: Float
  paymentGatewayId: Float
  paymentMethodId: Float
}

type DriverHistoryOrdersAvgAggregate {
  id: Float
  distanceBest: Float
  costBest: Float
  driverId: Float
  paymentGatewayId: Float
  paymentMethodId: Float
}

type DriverHistoryOrdersMinAggregate {
  id: ID
  status: OrderStatus
  createdOn: DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

type DriverHistoryOrdersMaxAggregate {
  id: ID
  status: OrderStatus
  createdOn: DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

type DriverHistoryOrdersAggregateResponse {
  groupBy: DriverHistoryOrdersAggregateGroupBy
  count: DriverHistoryOrdersCountAggregate
  sum: DriverHistoryOrdersSumAggregate
  avg: DriverHistoryOrdersAvgAggregate
  min: DriverHistoryOrdersMinAggregate
  max: DriverHistoryOrdersMaxAggregate
}

type OrderEdge {
  """The node containing the Order"""
  node: Order!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type OrderConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [OrderEdge!]!
}

type OrderAggregateGroupBy {
  id: ID
  status: OrderStatus
  createdOn(by: GroupBy! = DAY): DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

"""Group by"""
enum GroupBy {
  DAY
  WEEK
  MONTH
  YEAR
}

type OrderCountAggregate {
  id: Int
  status: Int
  createdOn: Int
  distanceBest: Int
  costBest: Int
  driverId: Int
  paymentGatewayId: Int
  paymentMethodId: Int
}

type OrderSumAggregate {
  id: Float
  distanceBest: Float
  costBest: Float
  driverId: Float
  paymentGatewayId: Float
  paymentMethodId: Float
}

type OrderAvgAggregate {
  id: Float
  distanceBest: Float
  costBest: Float
  driverId: Float
  paymentGatewayId: Float
  paymentMethodId: Float
}

type OrderMinAggregate {
  id: ID
  status: OrderStatus
  createdOn: DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

type OrderMaxAggregate {
  id: ID
  status: OrderStatus
  createdOn: DateTime
  distanceBest: Int
  costBest: Float
  driverId: ID
  paymentGatewayId: ID
  paymentMethodId: ID
}

type OrderAggregateResponse {
  groupBy: OrderAggregateGroupBy
  count: OrderCountAggregate
  sum: OrderSumAggregate
  avg: OrderAvgAggregate
  min: OrderMinAggregate
  max: OrderMaxAggregate
}

type OrderConversationAggregateGroupBy {
  id: ID
  requestId: ID
}

type OrderConversationCountAggregate {
  id: Int
  requestId: Int
}

type OrderConversationSumAggregate {
  id: Float
  requestId: Float
}

type OrderConversationAvgAggregate {
  id: Float
  requestId: Float
}

type OrderConversationMinAggregate {
  id: ID
  requestId: ID
}

type OrderConversationMaxAggregate {
  id: ID
  requestId: ID
}

type OrderConversationAggregateResponse {
  groupBy: OrderConversationAggregateGroupBy
  count: OrderConversationCountAggregate
  sum: OrderConversationSumAggregate
  avg: OrderConversationAvgAggregate
  min: OrderConversationMinAggregate
  max: OrderConversationMaxAggregate
}

type OrderOptionsAggregateGroupBy {
  id: ID
}

type OrderOptionsCountAggregate {
  id: Int
}

type OrderOptionsSumAggregate {
  id: Float
}

type OrderOptionsAvgAggregate {
  id: Float
}

type OrderOptionsMinAggregate {
  id: ID
}

type OrderOptionsMaxAggregate {
  id: ID
}

type OrderOptionsAggregateResponse {
  groupBy: OrderOptionsAggregateGroupBy
  count: OrderOptionsCountAggregate
  sum: OrderOptionsSumAggregate
  avg: OrderOptionsAvgAggregate
  min: OrderOptionsMinAggregate
  max: OrderOptionsMaxAggregate
}

type OrderCancelReason {
  id: ID!
  title: String!
  isEnabled: Boolean!
  userType: AnnouncementUserType!
}

type RiderEdge {
  """The node containing the Rider"""
  node: Rider!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Login {
  jwtToken: String!
}

type VerifcationResult {
  jwtToken: String!
  user: Driver!
  hasPassword: Boolean!
  hasName: Boolean!
}

type VerifyNumberDto {
  """
  If an existing user then the hash will be null, so the user can be logged in using password instead of OTP.
  """
  isExistingUser: Boolean!

  """
  Hash that will need to be passed in subsequent verify code call in order for match and verifcation to happen.
  """
  hash: String
}

type DriverDocument {
  id: ID!
  title: String!
  description: String
  isEnabled: Boolean!
  isRequired: Boolean!
}

type Complaint {
  id: ID!
  subject: String!
  content: String
  status: ComplaintStatus!
}

enum ComplaintStatus {
  Submitted
  UnderInvestigation
  Resolved
}

type ComplaintEdge {
  """The node containing the Complaint"""
  node: Complaint!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type Review {
  serviceName: String!
  rating: Float!
  review: String!
  goodPoints: [String!]!
}

type FeedbacksSummary {
  averageRating: Float
  goodPoints: [String!]!
  badPoints: [String!]!
  goodReviews: [Review!]!
}

type PayoutMethod {
  id: ID!
  enabled: Boolean!
  name: String!
  type: PayoutMethodType!
  linkMethod: GatewayLinkMethod!
  media: Media
}

"""The type of payout method"""
enum PayoutMethodType {
  Stripe
  BankTransfer
}

type PayoutAccount {
  id: ID!
  name: String
  accountNumber: String
  routingNumber: String
  bankName: String
  accountHolderName: String
  branchName: String
  isDefault: Boolean!
  accountHolderAddress: String
  accountHolderCity: String
  accountHolderState: String
  accountHolderZip: String
  accountHolderCountry: String
  accountHolderPhone: String
  accountHolderDateOfBirth: DateTime
  driverId: ID!
  linkType: GatewayLinkMethod

  """Deprecated in favor of payout method relation"""
  paymentGateway: PaymentGateway
  payoutMethod: PayoutMethod!
}

type TopUpWalletResponse {
  status: TopUpWalletStatus!
  url: String
  error: String
}

enum TopUpWalletStatus {
  OK
  Redirect
  Failed
}

type StatisticsResult {
  currency: String!
  dataset: [Datapoint!]!
}

type Datapoint {
  name: String!
  current: String!
  earning: Float!
  count: Float!
  distance: Float!
  time: Float!
}

type GiftCard {
  id: ID!
  amount: Float!
  currency: String!
}

type SetupPaymentMethod {
  url: String
}

type DriverTransacionEdge {
  """The node containing the DriverTransacion"""
  node: DriverTransacion!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type DriverTransacionConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [DriverTransacionEdge!]!
}

type PayoutAccountDeleteResponse {
  id: ID
  name: String
  accountNumber: String
  routingNumber: String
  bankName: String
  accountHolderName: String
  branchName: String
  isDefault: Boolean
  accountHolderAddress: String
  accountHolderCity: String
  accountHolderState: String
  accountHolderZip: String
  accountHolderCountry: String
  accountHolderPhone: String
  accountHolderDateOfBirth: DateTime
  driverId: ID
  linkType: GatewayLinkMethod
}

type ServiceEdge {
  """The node containing the Service"""
  node: Service!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type SOS {
  id: ID!
}

input PointInput {
  lat: Float!
  lng: Float!
  heading: Int
}

input AppConfigInfoInput {
  logo: String
  name: String
  color: AppColorScheme
}

input OpeningHoursInput {
  open: String!
  close: String!
}

input PhoneNumberInput {
  countryCode: String!
  number: String!
}

input DeliveryContactInput {
  name: String!
  phoneNumber: PhoneNumberInput!
  email: String
  addressLine1: String!
  addressLine2: String
  zone: String
  buildingNumber: String
  apartmentNumber: String
  city: String
  state: String
  instructions: String
  postalCode: String
  companyName: String
}

type Query {
  feedbacksSummary: FeedbacksSummary!
  getSupportedPayoutMethods: [PayoutMethod!]!
  getPayoutLinkUrl(input: GetPayoutLinkUrlInput!): TopUpWalletResponse!
  orderAggregate(
    """Filter to find records to aggregate on"""
    filter: OrderAggregateFilter
  ): [OrderAggregateResponse!]!
  order(
    """The id of the record to find."""
    id: ID!
  ): Order!
  orders(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: OrderFilter! = {}

    """Specify to sort results."""
    sorting: [OrderSort!]! = []
  ): OrderConnection!
  availableOrders: [Order!]!
  getStats(timeframe: TimeQuery!): StatisticsResult!
  getStatsNew(timeframe: TimeQuery!, startDate: DateTime!, endDate: DateTime!): StatisticsResult!
  announcements: [Announcement!]!
  requireUpdate(versionCode: Int!): VersionStatus!
  driverRequiredDocuments: [DriverDocument!]!
  payoutAccounts(
    """Specify to filter the records returned."""
    filter: PayoutAccountFilter! = {}

    """Specify to sort results."""
    sorting: [PayoutAccountSort!]! = []
  ): [PayoutAccount!]!
  payoutMethods(
    """Specify to filter the records returned."""
    filter: PayoutMethodFilter! = {}

    """Specify to sort results."""
    sorting: [PayoutMethodSort!]! = []
  ): [PayoutMethod!]!
  driverTransacions(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: DriverTransacionFilter! = {}

    """Specify to sort results."""
    sorting: [DriverTransacionSort!]! = []
  ): DriverTransacionConnection!
  driverWallets(
    """Specify to filter the records returned."""
    filter: DriverWalletFilter! = {}

    """Specify to sort results."""
    sorting: [DriverWalletSort!]! = []
  ): [DriverWallet!]!
  paymentGateways(
    """Specify to filter the records returned."""
    filter: PaymentGatewayFilter! = {}

    """Specify to sort results."""
    sorting: [PaymentGatewaySort!]! = []
  ): [PaymentGateway!]!
  savedPaymentMethod(
    """The id of the record to find."""
    id: ID!
  ): SavedPaymentMethod!
  savedPaymentMethods(
    """Specify to filter the records returned."""
    filter: SavedPaymentMethodFilter! = {}

    """Specify to sort results."""
    sorting: [SavedPaymentMethodSort!]! = []
  ): [SavedPaymentMethod!]!
  driver(
    """The id of the record to find."""
    id: ID!
  ): Driver!
  carModels(
    """Specify to filter the records returned."""
    filter: CarModelFilter! = {}

    """Specify to sort results."""
    sorting: [CarModelSort!]! = []
  ): [CarModel!]!
  carColors(
    """Specify to filter the records returned."""
    filter: CarColorFilter! = {}

    """Specify to sort results."""
    sorting: [CarColorSort!]! = []
  ): [CarColor!]!
  driverServicesServiceDTOS(
    """Specify to filter the records returned."""
    filter: DriverServicesServiceDTOFilter! = {}

    """Specify to sort results."""
    sorting: [DriverServicesServiceDTOSort!]! = []
  ): [DriverServicesServiceDTO!]!
  orderCancelReason(
    """The id of the record to find."""
    id: ID!
  ): OrderCancelReason!
  orderCancelReasons(
    """Specify to filter the records returned."""
    filter: OrderCancelReasonFilter! = {}

    """Specify to sort results."""
    sorting: [OrderCancelReasonSort!]! = []
  ): [OrderCancelReason!]!
  orderMessages(
    """Specify to filter the records returned."""
    filter: OrderMessageFilter! = {}

    """Specify to sort results."""
    sorting: [OrderMessageSort!]! = []
  ): [OrderMessage!]!
}

input GetPayoutLinkUrlInput {
  gatewayId: ID!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

enum TimeQuery {
  Daily
  Weekly
  Monthly
}

enum VersionStatus {
  Latest
  MandatoryUpdate
  OptionalUpdate
}

input PayoutAccountFilter {
  and: [PayoutAccountFilter!]
  or: [PayoutAccountFilter!]
  id: IDFilterComparison
  driverId: IDFilterComparison
}

input PayoutAccountSort {
  field: PayoutAccountSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PayoutAccountSortFields {
  id
  driverId
}

input PayoutMethodFilter {
  and: [PayoutMethodFilter!]
  or: [PayoutMethodFilter!]
  id: IDFilterComparison
}

input PayoutMethodSort {
  field: PayoutMethodSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PayoutMethodSortFields {
  id
}

input PaymentGatewayFilter {
  and: [PaymentGatewayFilter!]
  or: [PaymentGatewayFilter!]
  id: IDFilterComparison
  enabled: BooleanFieldComparison
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input PaymentGatewaySort {
  field: PaymentGatewaySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PaymentGatewaySortFields {
  id
  enabled
}

input CarModelFilter {
  and: [CarModelFilter!]
  or: [CarModelFilter!]
  id: IDFilterComparison
}

input CarModelSort {
  field: CarModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarModelSortFields {
  id
}

input CarColorFilter {
  and: [CarColorFilter!]
  or: [CarColorFilter!]
  id: IDFilterComparison
}

input CarColorSort {
  field: CarColorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CarColorSortFields {
  id
}

input OrderCancelReasonFilter {
  and: [OrderCancelReasonFilter!]
  or: [OrderCancelReasonFilter!]
  id: IDFilterComparison
  isEnabled: BooleanFieldComparison
  userType: AnnouncementUserTypeFilterComparison
}

input AnnouncementUserTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AnnouncementUserType
  neq: AnnouncementUserType
  gt: AnnouncementUserType
  gte: AnnouncementUserType
  lt: AnnouncementUserType
  lte: AnnouncementUserType
  like: AnnouncementUserType
  notLike: AnnouncementUserType
  iLike: AnnouncementUserType
  notILike: AnnouncementUserType
  in: [AnnouncementUserType!]
  notIn: [AnnouncementUserType!]
}

input OrderCancelReasonSort {
  field: OrderCancelReasonSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrderCancelReasonSortFields {
  id
  isEnabled
  userType
}

type Mutation {
  markPayoutAccountAsDefault(payoutMethodId: ID!): PayoutAccount!
  updatePayoutMethod(input: UpdatePayoutMethodInput!): PayoutAccount!
  createPayoutAccount(input: PayoutAccountInput!): PayoutAccount!
  sosSignal(orderId: ID!, location: PointInput): SOS!
  updateLastSeenMessagesAt(orderId: ID!): Boolean!
  updateOneOrder(input: UpdateOneOrderInput!): Order!
  updateDriversLocationNew(point: PointInput!): [Order!]!
  submitReview(input: RiderReviewInput!): Order!
  topUpWallet(input: TopUpWalletInput!): TopUpWalletResponse!
  setupPaymentMethod(gatewayId: ID!): SetupPaymentMethod!
  updatePaymentMethodDefault(id: ID!, isDefault: Boolean!): [SavedPaymentMethod!]!
  redeemGiftCard(code: String!): GiftCard!
  markPaymentMethodAsDefault(id: ID!): [SavedPaymentMethod!]!
  deleteSavedPaymentMethod(id: ID!): [SavedPaymentMethod!]!
  login(input: LoginInput!): Login!
  deleteUser: Driver!
  skipVerification(mobileNumber: String!): Login!

  """
  Returns a hash that will need to be passed in subsequent verify code call in order for match and verifcation to happen. Real sms is not sent in demo mode. It is 123456 by default.
  """
  verifyNumber(mobileNumber: String!, countryIso: String, forceSendOtp: Boolean): VerifyNumberDto!

  """
  Returns a JWT token if the code matches the hash. In demo mode the OTP is not sent. It is 123456 by default.
  """
  verifyOtp(hash: String!, code: String!): VerifcationResult!
  verifyPassword(mobileNumber: String!, password: String!): VerifcationResult!
  setPassword(password: String!): VerifcationResult!
  addOptionsToService(input: AddOptionsToServiceInput!): Service!
  setOptionsOnService(input: SetOptionsOnServiceInput!): Service!
  createOnePayoutAccount(input: CreateOnePayoutAccountInput!): PayoutAccount!
  updateOnePayoutAccount(input: UpdateOnePayoutAccountInput!): PayoutAccount!
  deleteOnePayoutAccount(input: DeleteOnePayoutAccountInput!): PayoutAccountDeleteResponse!
  addDocumentsToDriver(input: AddDocumentsToDriverInput!): Driver!
  setDocumentsOnDriver(input: SetDocumentsOnDriverInput!): Driver!
  updateOneDriver(input: UpdateOneDriverInput!): Driver!
  createOneOrderMessage(input: CreateOneOrderMessageInput!): OrderMessage!
  createOneComplaint(input: CreateOneComplaintInput!): Complaint!
}

input UpdatePayoutMethodInput {
  id: ID!
  isDefault: Boolean!
}

input PayoutAccountInput {
  name: String!
  payoutMethodId: ID!
  accountNumber: String!
  routingNumber: String
  bankName: String!
  accountHolderName: String
  branchName: String
  isDefault: Boolean!
  accountHolderAddress: String
  accountHolderCity: String
  accountHolderState: String
  accountHolderZip: String
  accountHolderCountry: String
  accountHolderPhone: String
  accountHolderDateOfBirth: DateTime
}

input UpdateOneOrderInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateOrderInput!
}

input UpdateOrderInput {
  status: OrderStatus
  paidAmount: Float
  destinationArrivedTo: Int
}

input RiderReviewInput {
  """Score, a value between 0 to 100"""
  score: Int!
  description: String

  """Order ID"""
  orderId: String!
}

input TopUpWalletInput {
  gatewayId: ID!
  amount: Float!
  currency: String!
  token: String
  pin: Float
  otp: Float
  transactionId: ID
  paymentMode: PaymentMode! = PaymentGateway
}

input LoginInput {
  firebaseToken: String!
}

input AddOptionsToServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetOptionsOnServiceInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateOnePayoutAccountInput {
  """The record to create"""
  payoutAccount: CreatePayoutAccount!
}

input CreatePayoutAccount {
  id: ID!
  name: String
  accountNumber: String
  routingNumber: String
  bankName: String
  accountHolderName: String
  branchName: String
  isDefault: Boolean!
  accountHolderAddress: String
  accountHolderCity: String
  accountHolderState: String
  accountHolderZip: String
  accountHolderCountry: String
  accountHolderPhone: String
  accountHolderDateOfBirth: DateTime
  driverId: ID!
  linkType: GatewayLinkMethod
}

input UpdateOnePayoutAccountInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePayoutAccount!
}

input UpdatePayoutAccount {
  id: ID
  name: String
  accountNumber: String
  routingNumber: String
  bankName: String
  accountHolderName: String
  branchName: String
  isDefault: Boolean
  accountHolderAddress: String
  accountHolderCity: String
  accountHolderState: String
  accountHolderZip: String
  accountHolderCountry: String
  accountHolderPhone: String
  accountHolderDateOfBirth: DateTime
  driverId: ID
  linkType: GatewayLinkMethod
}

input DeleteOnePayoutAccountInput {
  """The id of the record to delete."""
  id: ID!
}

input AddDocumentsToDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDocumentsOnDriverInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input UpdateOneDriverInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDriverInput!
}

input UpdateDriverInput {
  firstName: String
  lastName: String
  status: DriverStatus
  certificateNumber: String
  email: String
  carProductionYear: Int
  carPlate: String
  mediaId: ID
  gender: Gender
  accountNumber: String
  bankName: String
  bankRoutingNumber: String
  password: String
  bankSwift: String
  presetAvatarNumber: Int
  address: String
  carModelId: ID
  carId: ID
  carColorId: ID
  notificationPlayerId: String
  searchDistance: Int
}

input CreateOneOrderMessageInput {
  """The record to create"""
  orderMessage: OrderMessageInput!
}

input OrderMessageInput {
  requestId: ID!
  content: String!
}

input CreateOneComplaintInput {
  """The record to create"""
  complaint: ComplaintInput!
}

input ComplaintInput {
  requestId: ID!
  subject: String!
  content: String
  requestedByDriver: Boolean
}

type Subscription {
  newMessageReceived: OrderMessage!
  orderCreated: Order!
  orderUpdated: Order!
  orderRemoved: Order!
}